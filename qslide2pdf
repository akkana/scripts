#!/usr/bin/env python3

# Convert HTML pages to PDF.
# Copyright 2017 by Akkana Peck -- share and enjoy under the GPL v2 or later.

# If PdfFileMerger fails,
# To convert all the output files into a single multi-page PDF, use this:
# gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=multipage.pdf -dBATCH file*.pdf

# To use this on one of my slide presentations, where the successive
# URLs are listed in slides.js, one per line:
# qslide2pdf $(fgrep .html slides.js | sed -e 's_//.*__' -e 's/^ *\"//' -e 's/\".*$//' -e 's_^_http://localhost/DEcaucus/_' | egrep .html)

import sys
import time

import urllib.request

from PyQt5.QtCore import QUrl, QSizeF, QMarginsF
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWebEngineWidgets import QWebEnginePage, QWebEngineProfile
from PyQt5.QtGui import QPageLayout, QPageSize

from PyPDF2 import PdfFileMerger
from io import BytesIO

class HeadlessPagePrinter():
    """Load a single page and convert it to PDF.
       When the PDF is ready, call the pdf_ready() callback.
    """
    def __init__(self, app, pdf_ready, x_res=1024):
        self.profile = QWebEngineProfile()
        self.webpage = QWebEnginePage(self.profile, app)

        self.webpage.loadFinished.connect(self.load_finished)
        self.x_res = x_res

        self.pdf_ready = pdf_ready

    def load_url(self, url):
        """pdf_ready is a callback called with a QString
           of the PDF bytes 'printed'.
        """
        # Sadly, QWebEnginePage has no way to apply custom stylesheets
        # or otherwise change style.
        # So we have to intercept the load and insert our print style
        # directly into the page, rather than just loading a URL.
        # self.webpage.load(QUrl(url))

        # Use urllib because it handles file:// requests, unlike requests.
        r = urllib.request.urlopen(url)
        html = r.read().decode(r.headers.get_content_charset() or 'utf-8')

        html = html.replace('</head>', '''
<style type="text.css">
@media print {
  body {
    width: %dpx;
    height: 768px;
    position: absolute; left: 0px; top: 0px;
    border: 0; margin: 0; padding: 0;
    overflow: hidden;
  }
  #points li { visibility: visible !important; }
  #notes, #nextdiv { display: none; }
}
</style>
</head>''' % self.x_res)

        self.webpage.setHtml(html, QUrl(url))

    def load_finished(self, ok):
        # This gets called before the load is actually finished. Sigh.
        # The html is loaded, but images might not be.
        # So wait a bit:
        time.sleep(.4)

        # contentsSize is always 0x0. Not clear if it's supposed to be useful.
        # print("Contents size is %f x %f" %
        #       (self.webpage.contentsSize().width(),
        #        self.webpage.contentsSize().height()))

        margins = QMarginsF(0, 0, 0, 0)

        # With QSizeF(271, 203.3), it makes a 1024x768 PDF; but it
        # prints the whole 1366 web page so it will fit in a 1024x768 box,
        # even if the content extends outside.
        # But an @media print CSS rule to keep everything at 1024 fixes that.
        # With QSizeF(362, 203.3) it can print a full 1366x768.
        if self.x_res > 1024:
            xmm = 362
        else:
            xmm = 271
        ymm = 203.3
        # print("Page size of", xmm, ymm)
        layout = QPageLayout(QPageSize(QSizeF(xmm, ymm),
                                       QPageSize.Millimeter),
                             QPageLayout.Portrait, margins,
                             QPageLayout.Millimeter, margins)

        self.webpage.printToPdf(self.pdf_ready, layout)

class SlidePrinter:
    def __init__(self, app, outfile, x_res=1024):
        self.renderer = HeadlessPagePrinter(app, self.pdf_ready, x_res=x_res)

        # PdfFileMerger always fails with "Multiple definitions in dictionary"
        # unless you add strict=False.
        # https://github.com/mstamy2/PyPDF2/issues/244
        self.merger = PdfFileMerger(strict=False)

        self.outfile = outfile

    def add_pages(self, urllist):
        self.urllist = urllist
        self.urlindex = 0
        self.next_page()

    def next_page(self):
        if self.urlindex >= len(self.urllist):
            print("All done")
            sys.exit(0)
        print("=== Rendering url", self.urlindex, ":",
              self.urllist[self.urlindex])
        self.renderer.load_url(self.urllist[self.urlindex])

    def pdf_ready(self, pdf_bytes):
        # print("finished rendering to", len(pdf_bytes), "bytes")
        if pdf_bytes:
            filename = "/tmp/page%d.pdf" % self.urlindex
            with open(filename, "wb") as fp:
                fp.write(pdf_bytes)
                fp.close()
            bytes_fp = BytesIO(pdf_bytes.data())
            self.merger.append(bytes_fp)
        else:
            print("No output for", self.urllist[self.urlindex-1])

        self.urlindex += 1
        if self.urlindex >= len(self.urllist):
            # print("\nTrying to save the merged file")
            with open(self.outfile, "wb") as fp:
                self.merger.write(fp)
            print("Wrote", self.outfile)
            sys.exit(0)

        else:
            self.next_page()

if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print("what pages?")
        sys.exit(1)

    # -1024 or -1366
    if len(sys.argv) > 2 and sys.argv[1].startswith('-'):
        try:
            x_res = int(sys.argv[1][1:])
            args = sys.argv[2:]
        except:
            print("Can't parse flag", sys.argv[1])
            sys.exit(1)
    else:
        x_res = 1024
        args = sys.argv[1:]

    if len(args) < 1:
        print("Usage: %s [-1024|-1366] file.html file.html ..."
              % os.basename(sys.argv[0]))
        sys.exit(1)

    app = QApplication(sys.argv)
    slideprinter = SlidePrinter(app, "/tmp/outfile.pdf", x_res=x_res)
    slideprinter.add_pages(args)
    app.exec_()

