#!/usr/bin/env python

from __future__ import print_function

import sys, os, time

# Tkinter changed capitalization from Python 2 to Python 3.
# Python 2: import Tkinter as tkinter
# Python 3: import tkinter
# The error trying to import a nonexistent module also changed:
# Python2 raises ImportError, while Python3 raises ModuleNotFoundError
# which is a class of ImportError. Use ImportError because both
# Python versions understand it.
try:
    import tkinter
    # This may throw ImportError in Python 2 or ModuleNotFoundError in Py 3.
except ImportError:
    # In case it's Python 2, try importing it the Python 2 way:
    try:
        import Tkinter as tkinter
    except ImportError:
        print("Sorry, ImportError, eggtimer needs Tkinter")
        sys.exit(1)

# Callback for key events:
def keyEvent(event):
    # print(event.char, event.keysym, event.keycode)
    if event.char == 'q' or event.keysym == 'Return':
        sys.exit(0)

def Usage():
    print("Usage:", sys.argv[0], "minutes message")
    sys.exit(1)

def showAlert(message):
    # This is supposed to show a dialog, but tkMessageBox doesn't exist:
    # tkMessageBox.showwarning("hello", message)

    # Try to beep a bit, even though that doesn't work on some distros:
    print("")
    # print message

    root = tkinter.Tk()

    button = tkinter.Button(root, text=message,
                            bg="red", activebackground="red",
                            fg="white", activeforeground="white",
                            font=("Sans", 40, "bold"),
                            command=quit)

    # Make sure the window is at least as big as the screen:
    button.pack(ipadx=root.winfo_screenwidth()/2,
                ipady=root.winfo_screenheight()/2)

    # Apparently we can't bind key events to a button, only to the root:
    root.bind("<Key>", keyEvent)

    root.mainloop()

# main: read the runtime arguments.
if __name__ == '__main__':

    try:
      sleeptime = float(sys.argv[1]) * 60
    except ValueError:
      Usage()

    message = ' '.join(sys.argv[2:]) if len(sys.argv) > 2 else "Wake up!"
    print("Sleeping for", sleeptime, "seconds with message:", message)

    # Return control to the shell before sleeping:
    rc = os.fork()
    if rc:
        sys.exit(0)

    time.sleep(sleeptime)

    showAlert(message)
