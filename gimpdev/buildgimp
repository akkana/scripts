#!/usr/bin/zsh

# Build GIMP.
# First argument is the version (which is also the name of the
# build directory), e.g. buildgimp master will use a
# SRCDIR=$HOME/outsrc/gimp-master and a PREFIX=$HOME/run/gimp-master
#
# With no args, will assume "master".
#
# If cleangimp is specified as the final argument,
# run a git clean -dfx in gimp, but not in other dirs.
#
# If cleanall is specified as the final argument,
# also update the config.site and
# run git clean -dfx in any srcdir that wasn't freshly checked out.
#
# This also serves as a cheatsheet for how to build GIMP.
#
# Some references (none of these has everything, but between them
# hopefully you can get all the instructions):
# https://testing.developer.gimp.org/core/setup/build/
# https://testing.developer.gimp.org/core/setup/build/linux/
#   (or the one for your OS, if not Linux)
# https://gitlab.gnome.org/GNOME/gimp/-/blob/master/INSTALL.in
# https://testing.developer.gimp.org/core/submit-patch/

usage() {
    echo "Usage: buildgimp [cleangimp|cleanall] [justbuild] [-n|--dryrun] [gimp-version-directory]"
    exit 1
}

# Which GIMP to build; default is 'master'
GIMPVER=master

# Just build, don't pull anything new.
# This is sometimes needed e.g. after applying a patch,
# since the pull stage will die because of needing to merge.
justbuild=0

# really build, or just print arguments?
dryrun=false

# Clean anywhere before building? can be no, gimp or all
clean=

FINAL_MESSAGES=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -n|--dryrun)
            dryrun=true
            shift
            ;;
        -b|--justbuild)
            justbuild=1
            shift
            ;;
        clean)
            usage
            ;;
        cleangimp)
            clean=gimp
            shift
            ;;
        cleanall)
            clean=all
            shift
            ;;
    -*|--*)
      echo "Unknown option $1"
      usage
      ;;
    *)
      GIMPVER="$1"
      shift
      ;;
  esac
done

# echo "After parsing arguments:"
# echo GIMPVER = $GIMPVER
# echo dryrun = $dryrun
# echo justbuild = $justbuild
# echo clean = $clean
# exit 0

export PREFIX=$HOME/run/gimp-$GIMPVER
export SRCDIR=$HOME/outsrc/gimp-$GIMPVER

echo "Using PREFIX of $PREFIX"
echo "Using SRCDIR of $SRCDIR"

echo_and_do() {
  if [ $dryrun = false ]; then
    echo "=== Running: $@"
    "$@"
  else
    echo "=== Would run: $@"
  fi
}

if [ ! -d $PREFIX ]; then
    echo "$PREFIX does not exist."
    usage
else
    echo "$PREFIX exists"
    if [[ $clean != "" ]]; then
        echo Removing $PREFIX
        if [[ -e $PREFIX/share/config.site ]]; then
            echo_and_do mv $PREFIX/share/config.site /tmp/gimp-config.site
        else
            echo ">>>>>>>>> WARNING: NO $PREFIX/share/config.site"
            exit 1
        fi
        echo_and_do rm -rf $PREFIX
        echo_and_do mkdir -p $PREFIX/share
        if [[ -e /tmp/gimp-config.site ]]; then
            echo_and_do cp /tmp/gimp-config.site $PREFIX/share/config.site
        fi
    fi
fi

if [ ! -d $SRCDIR ]; then
    echo "$SRCDIR does not exist."
    usage
else
    echo "$SRCDIR exists"
fi

export PATH="$PREFIX/bin:$PATH"
export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:$PREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
export LD_LIBRARY_PATH="$PREFIX/lib:$LD_LIBRARY_PATH"
export ACLOCAL_FLAGS="-I $PREFIX/share/aclocal $ACLOCAL_FLAGS"

overwrite_config_dot_site() {

    # The build will fail if the share/aclocal dir isn't already created.
    # The share dir needs to be there in any case, for config.site.
    mkdir -p $PREFIX/share/aclocal

    # Overwrite config.site:
    cat >$PREFIX/share/config.site <<EOF
PREFIX=$PREFIX
export PATH="\$PREFIX/bin:\$PATH"
export PKG_CONFIG_PATH="\$PREFIX/lib/pkgconfig:\$PREFIX/share/pkgconfig:\$PKG_CONFIG_PATH"
export LD_LIBRARY_PATH="\$PREFIX/lib:\$LD_LIBRARY_PATH"
export ACLOCAL_FLAGS="-I \$PREFIX/share/aclocal \$ACLOCAL_FLAGS"
export XDG_DATA_DIRS=$PREFIX/share:$XDG_DATA_DIRS
# export GI_TYPELIB_PATH=
EOF

}

if [[ "$clean" = "gimp" ]]; then
    echo "Cleaning first in GIMP"

    echo_and_do overwrite_config_dot_site

elif [[ "$clean" = "all" ]]; then
    echo "Cleaning all directories"
    echo ""
    sleep 3
    echo_and_do rm -rf $PREFIX
    echo_and_do overwrite_config_dot_site
    echo "done cleaning"
fi

# Make sure this exits on errors:
setopt errreturn

# XDG_DATA_DIRS is now needed for the GEGL build, but may break the GIMP build.
# If you set it for the GIMP build, you may encounter problems like:
# Can't open ./cursors/cursor-color-picker.png: Couldn’t recognize
# the image file format for file “./cursors/cursor-color-picker.png”
# It's not clear whether there's a dir you can add to it that would
# cure this; possibly /usr/local/share ?
# https://specifications.freedesktop.org/basedir-spec/0.6/ar01s03.html
# and https://wiki.archlinux.org/index.php/XDG_Base_Directory
# both say it defaults to /usr/local/share:/usr/share.
# The error is only sporadic so it's difficult to test.
if [[ x$XDG_DATA_DIRS == x ]]; then
    export XDG_DATA_DIRS=$PREFIX/share:/usr/local/share:/usr/share
else
    export XDG_DATA_DIRS=$PREFIX/share:$XDG_DATA_DIRS
fi

# meson/ninja are now used for babl, gegl and gimp
meson-build() {
    # setopt localoptions errreturn doesn't work: use && for everything

    # From Jehan, for Meson/Ninja builds:
    MESONSRC=$(pwd)
    BUILD_DIR=$MESONSRC/obj-$(arch)
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR

    # Sometimes the meson command fails, but meson reconfigure works.
    # I'm not sure what the difference is.
    if [ -e build.ninja ]; then
        # As of July 2023 meson reconfigure no longer works:
        # ERROR: Neither source directory 'reconfigure' nor build directory None contain a build file meson.build.
        # WARNING: Running the setup command as `meson [options]` instead of `meson setup [options]` is ambiguous and deprecated.

        # but supposedly ninja will do whatever's needed.
        # meson reconfigure
    else
        echo "== running meson"
        # 2024-10-26 jehan thinks lua is messing up the build,
        # but it turns out that wasn't the problem
        # echo_and_do meson -Dprefix=$PREFIX --libdir=lib -Dlua=false $MESONSRC
        echo_and_do meson -Dprefix=$PREFIX --libdir=lib $MESONSRC
    fi

    echo_and_do ninja && \
    echo_and_do ninja install && \
    cd ..
}

meson-install() {
    MESONSRC=$(pwd)
    BUILD_DIR=$MESONSRC/obj-$(arch)
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR
    meson install
}


# update-clone dir repo: if dir already exists, cd there and git pull;
# if not, git clone and then cd into the new dir.
# If branch is set, check out that branch.
# Either way, if $clean is set to all do a git clean -dfx.
# Either way, we should end up in the directory with an up-to-date repo.
#
# Sets pullstatus=0 if nothing happened, 1 if it pulled anything.
pull-clone() {
    if [[ $justbuild == 1 ]]; then
        echo "Just building, not pulling"
        return
    fi

    repo=$1

    pullstatus=0

    # Find the directory by stripping the extension from the URL basename
    # e.g. gimp, gegl, libmypaint
    projname=$(basename $repo:r)
    echo "proj name:" $projname
    cd $SRCDIR
    # echo pull_clone: SRCDIR $SRCDIR, repo $repo, ./$projname, clean $clean, branch $branch

    # Have we checked out in this directory before?
    # There's a thing on https://stackoverflow.com/questions/13736385/how-to-write-a-shell-script-that-checks-if-git-repository-is-up-to-date
    # that says to use
    #   git fetch origin
    #   reslog=$(git log HEAD..origin/$branch --oneline)
    #   if [[ "${reslog}" != "" ]] ; then  ...
    # but it only works for master, not for branches.
    # This may be more useful:
    if [[ -d $projname ]]; then

        cd $projname
        echo "Now in $projname :" $(pwd)
        echo "running git checkout"
        git checkout $branch
        echo "running git pull"
        pullres=$(git pull)

        echo "Git pulled:" $pullres
        if [[ x$pullres != 'xAlready up to date.' ]]; then
            pullstatus=1
        fi
        if [[ $clean == "all" ||
                  ($clean == "gimp" && $projname == "gimp") ]]; then
            echo_and_do git clean -dfx
            pullstatus=1
        fi
    else
        # New directory, never pulled before
        echo_and_do git clone $repo
        cd $projname
        if [[ x$branch != x ]]; then   # no branch
            echo_and_do git checkout -t origin/$branch
        fi
        pullstatus=1
    fi
    echo "Pullstatus" $pullstatus

    # If you need to re-run and buld everything, uncomment the next line:
    # pullstatus=1

    # If these are left set, then any future calls that don't set them
    # may get a value left over from the last call.
    unset repo
    unset branch
}

# pushd, but not if we're already at the target directory
# or if we're currently home.
# Use in other scripts that need to save the previous directory.
pushd_maybe() {
    cwd=`pwd`
    if [[ x$1 == x$cwd ]]; then
        return
    fi
    if [[ x$cwd == x$HOME ]]; then
        cd $1
    else
        pushd $1
    fi
}

popd_maybe() {
    # $dirstack isn't documented anywhere near pushd/popd/dirs,
    # but it works. Apparently it's documented with the zsh/parameters
    # module in zshmodules(1).
    if [[ $#dirstack > 0 ]]; then
        popd
    fi
}

# These two only needed for master builds, not 2.10
echo
echo '========== mypaint-brushes'
cd $SRCDIR
branch=v1.3.x
pull-clone https://github.com/mypaint/mypaint-brushes.git
if [[ $pullstatus == 1 || $clean == 'all' ]]; then
    echo_and_do ./autogen.sh && echo_and_do ./configure --prefix=$PREFIX && echo_and_do make -j4 && echo_and_do make install
elif [[ $clean == 'gimp' ]]; then
    echo_and_do make install
fi

# On Debian sid, the distro-provided libmypaint is sometimes good enough,
# but other times, not so much.
# echo '========== libmypaint'
# echo "clean:" $clean
# cd $SRCDIR
# # pull-clone https://github.com/Jehan/mypaint-brushes.git $clean
# branch=libmypaint-v1
# pull-clone https://github.com/mypaint/libmypaint.git
# echo "pullstatus:" $pullstatus
# if [[ $pullstatus == 1 ]]; then
#     ./autogen.sh && ./configure --prefix=$PREFIX && make -j4 && make install
# fi

echo
echo '========== babl'
unset branch
# cd $SRCDIR/babl
# meson-build
# echo "Exiting in
# exit 0

cd $SRCDIR
echo in babl, clean is $clean
echo_and_do pull-clone https://gitlab.gnome.org/GNOME/babl.git $clean
echo "pullstatus:" $pullstatus
if [[ $pullstatus == 1 || $clean == 'all' ]]; then
    echo_and_do meson-build
elif [[ $clean == 'gimp' ]]; then
    echo_and_do meson-install
else
    echo "Nope, not building"
fi

echo
echo '========== gegl'
cd $SRCDIR
echo_and_do pull-clone https://gitlab.gnome.org/GNOME/gegl.git $clean
echo "pullstatus:" $pullstatus
if [[ $pullstatus == 1 || $clean == 'all' ]]; then
    echo_and_do meson-build
elif [[ $clean == 'gimp' ]]; then
    echo_and_do meson-install
fi

echo
echo '========== gimp'

cd $SRCDIR/gimp

if [[ $justbuild == 1 ]]; then
    # Just build, but might still need the submodules
    # git submodule update
    echo "Not pulling anything, just building gimp"
    pullstatus=1

else
    echo "justbuild is", $justbuild
    echo "Calling pull-clone from" $(pwd)
    echo_and_do pull-clone https://gitlab.gnome.org/GNOME/gimp.git $clean

    # If on master, git pull. If on another branch,
    # pull, but don't merge, all branches
    curbranch=$(git status | grep "On branch" | awk '{print $3}')

    if [[ x"$curbranch" != 'xmaster' ]]; then
        if [ $dryrun = false ]; then
            echo "Rebasing master to $curbranch"
            pullstatus=$(git fetch)
        else
            echo "Dry run, would run git fetch"
        fi
        # This is what I think I'm supposed to do to merge master changes
        # into a branch (after git fetch), but in practice it gives
        # merge conflicts that don't go away even after resolving them.
        # echo_and_do git rebase origin/master
        echo "**************** Didn't merge master changes into $curbranch"
        FINAL_MESSAGES="$FINAL_MESSAGES \n **************** Didn't merge master changes into $curbranch"
    else    # this is the git master branch
        if [ $dryrun = false ]; then
            pullstatus=$(git pull)
        else
            echo "Dry run, would run git pull"
        fi
    fi
    echo "pullstatus:" $pullstatus

    # This is now required to get the images in gimp-data.
    # If it fails, try once running git submodule update --init
    # though you might not need that if you cloned with --recurse as suggested in
    # https://testing.developer.gimp.org/core/submit-patch/#checkout-the-source
    # echo "Updating submodules"
    # pwd
    # echo_and_do git submodule update
    # However, it turns out git submodule update doesn't actually pull
    # changes in gimp-data, and to actually get updates, this is needed:
    echo "Pulling in gimp-data"
    cd gimp-data
    echo_and_do git pull
    cd ..
fi

# Don't actually care about pullstatus: if running buildgimp,
# the assumption is that we want to rebuild gimp.
#  --disable-vector-icons is temporary to try to get around a startup crash
if [[ 1 || $pullstatus == 1 ]]; then
    # You can build GIMP with either autotools or meson.
    # Comment out one of these lines.
    # ./autogen.sh --prefix=$PREFIX --disable-vector-icons && make -j4 && make install
    # ./autogen.sh --prefix=$PREFIX && make -j4 && make install

    # TEMPORARY: disable lua build. Lua is apparently messing up the build.
    # MESONSRC=$(pwd)
    # BUILD_DIR=$MESONSRC/obj-$(arch)
    # mkdir -p $BUILD_DIR
    # # cd $BUILD_DIR
    # echo running meson configure from $(pwd)
    # echo_and_do meson configure -Dprefix=$PREFIX --libdir=lib -Dlua=false
    # # cd ..

    echo_and_do meson-build
fi

# unset clean
# unset pullstatus
# unset SRCDIR
popd_maybe

echo $FINAL_MESSAGES

